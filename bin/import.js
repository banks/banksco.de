var old_posts = [{"id": 1,"title": "On the bandwagon","slug": "on-the-bandwagon","content": "**I'm a PHP developer by profession but this blog is a bit of a departure for me - it's a [Ruby on Rails](http://rubyonrails.org/) app.**\n\nI could have used pretty much any open source blog package out there, but I wanted to have a go at producing something real that worked with rails. There are also a few features I didn't find elsewhere (mostly formatting related).\n\nMy verdict: Ruby is a fantastic language. Rails is a great framework, but there is a little too much magic and opinion in it for my taste. I like to understand exactly what is going on at all levels in my apps but rails makes that incredibly hard because of all the monkey patching and the sheer size of the stack.\n\nThat's not really much of a criticism though and I think at least some of that will be much better in rails 3 having taken onboard the merb philosophy of decoupling core components.\n\nI'll certainly keep working with Ruby and probably rails - there is something so elegant about the language that it makes going back to PHP a little disappointing. Who knows, one day I might be completely converted.\n\nExpect me to post my web-related discoveries and opinions here in the future.\n\n","created_at": "2010-08-01 10:09:11","updated_at": "2010-08-01 14:28:48","user_id": 1}, {"id": 2,"title": "When not to use arrays in PHP","slug": "when-not-to-use-arrays-in-php","content": "**Arrays in PHP are actually pretty inefficient at storing lots of small bits of data.**\n\nI think I read that a single integer in an array uses 58 bytes of memory. Now that is not worth thinking about in most PHP applications, but it can matter when your arrays get big.\n\nAt work, I've recently been working on a system for highly customisable targeting in email newsletters. Part of the challenge here is writing the newsletter sender capable of sending 400,000+ emails with each one potentially targeted at the specific user efficiently.\n\nFor speed, we ended up pre-calculating which bits of content got rendered for each user to avoid the query overhead in the sending loop. This required storing a two-dimensional array, indexed by user ID, with an array of content IDs applicable to each user. It looked something like this:\n\n\t::php::\n\tarray(\n\t\t1 => array(1, 2, 3, 4),\n\t\t2 => array(2, 4, 3, 5),\n\t\t...\n\t);\n\t\nBut with around 400,000 elements. I was amazed that this array alone took up over 400MB of memory!\n\nI did some benchmarks and found some quite surprising things.\n\nIf I changed the array so each user had a comma separated string instead of an array, it shrank the memory requirements down by around 75%.\n\nI suspected though that I would pay for this saving in execution speed - surely it is much slower to have to explode each value manipulate the array and implode again than just direct access right? \n\nActually, no! I can only guess as to why that might be - less RAM to read/write/seek perhaps? It is actually over 60% quicker to use strings in this case!\n\nYou probably don't quite believe me so [here is a little script](http://gist.github.com/505177) to illustrate the point. Feel free to run it yourself.\n\nAnd the result:\n\n\tMemory for 2D:\t\t107.81MB\n\tMemory strings:\t\t23.89MB\n\tTime for 2D:\t\t6.47 seconds\n\tTime strings:\t\t2.32 seconds\n\n","created_at": "2010-08-02 19:29:32","updated_at": "2010-08-02 19:45:43","user_id": 1}, {"id": 3,"title": "JS on the server?","slug": "js-on-the-server","content": "Server-side javascript is something that I have been dimly aware of for a while now. At first, I thought it was yet another pointless attempt to use technology in ways it wasn't designed to be used, but recently it's been starting to make a little more sense to me.\n\nI won't go into too much detail here because [ReadWriteWeb](http://www.readwriteweb.com) have [done it better](http://www.readwriteweb.com/archives/server-side_javascript_back_with_a_vengeance.php). Also of interest, Felix Geisend√∂rfer (a former CakePHP contributor) also [explains why he's more interested in Node.js now](http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb).\n\nThe most interesting point for me is this: JS is currently getting a lot of attention (read millions of dollars) from many of the biggest players in the industry: Google, Apple, Mozilla and Microsoft. That means it is being optimized and getting faster at a rate that other server side languages can only dream of.\n\nI've heard (but not verified) that some bits of Node.js' C++ runtime have actually been re-written in JS because there was no performance difference!\n\nNow I love JS as a language, it is getting seriously quick, and we are getting closer to having a stable and relatively mature stack to write applications with. It probably isn't going to power the next twitter but this is certainly worth looking into.","created_at": "2010-08-09 19:16:42","updated_at": "2010-08-09 19:18:06","user_id": 1}, {"id": 4,"title": "Getting Social","slug": "getting-social","content": "I've enabled comments on the blog using [DISQUS](http://disqus.com). Sure I could have written my own into my lovely little rails app but that would be a lot of effort once moderation, spam control, user signup, OpenID integration etc. are included.\n\nDISQUS actually seems to be quite a neat solution for now and will hopefully make this content slightly more interesting once I start getting a bit of traffic through.\n\nI still have a couple of things to add to the blog (including more content) before I make more of an effort to get spidered and promoted at large on the web.","created_at": "2010-08-10 23:49:58","updated_at": "2010-08-10 23:49:58","user_id": 1}, {"id": 5,"title": "The Era of Komodo Edit","slug": "the-era-of-komodo-edit","content": "I'm reconfiguring a whole bunch of things on my machine. In the process, I couldn't bear to install Aptana 1.5 again. I've been using it for a year or so since ZDE went over to Eclipse and became even more horrible to use.\n\nAptana is also Eclipse based which doesn't fill me with Joy but 1.5 did have excellent PHP support. My love affair with it was not long lived though as the 2.0 release last year completely decimated everything that had made me move from ZDE by dropping Aptana's PHP plugin for PDT. I've also recently had a complete nightmare helping colleagues getting Aptana 1.5 to work on Ubuntu.\n\nI'd really love something lighter. TextMate is sleek, simple and beautiful but just doesn't cut it for me when it comes to code completion - I've come to rely on that for bigger projects and it's just too hard to go back! Netbeans is actually surprisingly good now although it is Java and getting close to being Eclipse-like.\n\nIn the end, I've been pretty impressed with [Komodo Edit](http://www.activestate.com/komodo-edit). <del>Still Java I guess but</del> [Not Java so] it feels a lot lighter than Eclipse, supports pretty much all the main features I use constantly in Aptana and generally seems good.\n\nI'll stick it out for a bit and see how it holds up once I start doing serious work.","created_at": "2010-08-14 16:00:49","updated_at": "2010-09-15 08:40:03","user_id": 1}, {"id": 6,"title": "Managing iPhone SDK versions and targeting","slug": "managing-iphone-sdk-versions-and-targeting","content": "**There are many subtleties when deploying apps with the iPhone SDK. One I have spent much time fiddling with in the past and actually got to the bottom of today is the difference between *Base SDK* and *Deployment Target*.**\n\nI spent an hour or so today jumping through the familiar hoops of getting some updates into our iPhone app at work. The latest updates involve dealing with background state transitions which requires accessing new API methods added in iOS 4.\n\nThe SDK docs do describe well how to ensure that API methods exist before calling version specific methods (using respondsToSelector).\n\nThe problem came when compiling for distribution. We ended up with an error saying:\n\n\tundeclared UIApplicationWillEnterForegroundNotification\n\t\nThis was because, in an attempt to make the application as widely usable as possible I'd set the *Base SDK* setting to iPhone 3.\n\nClearly this means you can't use iOS 4 specific API calls. The trick is to set the *Base SDK* to the *latest* version and then set the *iPhone OS Deployment Target* option to be the lowest version you wish to support. This way you can (conditionally) use all the latest API calls. \n\nIn this configuration, newer APIs are weakly linked which means that, provided you check APIs exist before accessing them as mentioned above, you app will still run on older OS versions with no compile or runtime errors.\n\nWith hindsight it seems obvious but it was one of those things that took a bit of effort to grasp.","created_at": "2010-08-20 21:11:06","updated_at": "2010-08-20 21:18:42","user_id": 1}, {"id": 7,"title": "To PHP or not to PHP?","slug": "to-php-or-not-to-php","content": "**I've recently run up against the limitations of PHP's OO features in many different projects. While there are some potential solutions, I'm in two minds about whether they are a good idea or not.**\n\nFor example, languages like Ruby and JavaScript allow 'Monkey Patching' or modifying classes/object's methods at run time. While some complain that this can cause terrible code and bugs that are very hard to track down, it allows things like behaviors (i.e. mixins for multiple inheritance) which can be a very powerful way of keeping code modular. \n\nAlso, [AOP](http://en.wikipedia.org/wiki/Aspect-oriented_programming) is a powerful tool for reducing code coupling and increasing code reuse. In JS or Ruby you could implement this easily by altering methods at run-time, in Java you can do it by altering methods at compile-time. In PHP you're stuck unless you add an additional 'compile' step into your workflow, negating most of the benefits of using an interpreted language.\n\nIn PHP, the closest we get (natively) is to use magic methods like `__call()` to intercept object method calls and do something else instead. There are two major problems with this\n\n1.  You have to fudge the scope about - there is no non-hacky way to add a method to a class from outside it and be able to use `$this` and other object properties as expected.\n\n2.  `__call()` is very slow even compared to standard PHP function calls. This *can* be a real issue if you are using it extensively and may have thousands of calls in a single page load.\n\n3.  It's not native - you end up having to add code to all your objects, or artificially alter the inheritance tree or wrap all your objects in proxy object or similar to get this to work.\n\n### (Enter Runkit)\n\n[Runkit](http://pecl.php.net/package/runkit) is a PECL extension that adds a few interesting methods to PHP that allow methods to be added/removed/copied between objects dynamically at runtime. The solutions to all the problems above? I'm not so sure.\n\nThe (new) problems:\n\n1.  It's non-standard. Goodbye to code portability. This will never be maintstream and so neither will all the work you put into classes/libraries.\n\n2.  It's experimental. It seems not enough interest has been shown in runkit and so, despite it being around for a while (at least 5 years!), it is still not recommended for production applications.\n\n3.  I can find no information about performance (and haven't had time to benchmark myself since it would mean recompiling PHP on my machine). I'd be very surprised if it didn't reduce the effectiveness of op-code caching substantially.\n\nPretty major downsides, but my question goes beyond this. I'm still really torn about whether it is even right to *want* this in PHP. If I really want ruby-like syntax and mixins, why don't I just write in Ruby?\n\nEvery language has it's strengths and weaknesses, I wonder if spending a lot of time and effort trying to emulate constructs possible in other languages is just bad PHP programming. Is it a flaw in PHP that it can't support neat mixins (without hacks or ugly code)? I'm not sure.\n\nI've been interested in the decision to drop behavior support in [Doctrine 2](http://www.doctrine-project.org) because it was too much of a hack and caused nightmare bugs. It was one of the features I most sought to emulate in other similar projects but ran into many of the same problems as the Doctrine team.\n\nOn the one hand, I'd really like to able to neatly and efficiently solve problems like multiple inheritance and providing 'magic' interfaces to ORM objects without restricting class inheritance etc but on the other hand, if it feels to much like a hack I end up feeling like I'm just using the wrong tools.\n\nIf you read this and have any thoughts, I'd love to hear what you think.","created_at": "2010-08-30 10:32:48","updated_at": "2010-08-30 10:47:50","user_id": 1}, {"id": 8,"title": "PHP Gotcha: are MD5 hashes numeric?","slug": "php-gotcha-are-md5-hashes-numeric","content": "**A bizarre bug just came up at work: a query in a cron script failed last night for no apparent reason even though thousands of queries are run by the same bit of code every day. The reason: an MD5 hash being incorrectly identified as a number in exponential form.**\n\nFirstly I guess I should point out that yes MD5 hashes *are* numeric, however in PHP `md5()` returns a string containing the hex digest. For this reason MD5 hashes are generally considered and used as strings in PHP.\n\nWe have a Database API at work that provides automatic escaping of values based on their type. It uses PHPs `is_numeric()` to determine if the value should be left unquoted as an integer or float.\n\nOne thing that isn't likely to come up much (but typically just did) is that `is_numeric()` also recognises numbers in exponential form `1234e34`. We had an issue where we were inserting an MD5 hash (a string) into a varchar field. But got an error from MySQL:\n\n\tIllegal double '937e3019763158166689073439699767' value found during parsing\n\t\nI took a look at this for a bit and then realised that the value was unquoted and contained only digits and 'e'.\n\nWe've put in a little more logic now that assumes that any string of exactly 32 chars and containing only hex digits (hint: `ctype_xdigit()`) is treated as a string!","created_at": "2010-09-07 09:27:13","updated_at": "2010-09-15 08:46:20","user_id": 1}, {"id": 9,"title": "Why NoSQL is great and geek fights aren't","slug": "why-nosql-is-great-and-geek-fights-arent","content": "**I've been reading a lot about the recent stream of RDBMs alternatives that are getting a lot of attention at the moment. I find the subject fascinating and many of the solutions and technologies coming out make me want to go and summon hundreds of EC2 instances just to distribute some random data over.**\n\nMy 30 second NoSQL overview: relational databases can become unwieldy once you need to scale beyond the capacity of a single server. Some applications can easily take advantage of multiple read slaves but with enough write traffic things need to get more exotic. Enter [sharding](http://en.wikipedia.org/wiki/Shard_\\(database_architecture\\)). If you want to read more about sharding, go ahead. Suffice it to say that once your data is split over separate physical machines, a substantial portion of what makes relational databases and SQL great goes out the window. No more joins, aggregate queries etc. \n\nGiven that the relational part is now severely impaired, people like Google and Amazon have come up with massively distributed systems that are effectively just glorified key-value stores or hash tables. They purposely don't support these more exotic relational features but they can handle petabytes of data and millions of users. The [Google BigTable](http://labs.google.com/papers/bigtable.html) and [Amazon Dynamo](http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html) papers are a great read.\n\nNoSQL encompasses these sorts of solutions as well as document-oriented databases like [MongoDB](http://www.mongodb.org/) and [CouchDB](http://couchdb.apache.org/) and stricter KV stores like [Reddis](http://code.google.com/p/redis/) or [Project Voldemort](http://project-voldemort.com/).\n\n### So is SQL dead? \n\nAs with so many things in our industry, NoSQL has caused a lot of hype and a lot of unnecessary angst. I was prompted to write this by a [recent article on readwriteweb](http://www.readwriteweb.com/cloud/2010/09/an-amusing-take-mysql-diehard.php) which links to a video someone has made. The video itself is somewhat amusing and makes some good points although could have done so much more succinctly and with less profanity in my opinion.\n\nIt would be great to see a little more sensible discussion about real-world use cases for new technology and much fewer turf wars. NoSQL is really interesting and, though it's tempting to assume new things are a silver bullet for all the current problems in a domain, we all know this is not the reality. As engineers we should take a great interest in new technology but ultimately we should pick the right tools for the job. For now SQL is probably the best overall tool for the majority of web applications.\n\nNoSQL solutions can solve some interesting problems however these will probably be limited to big-data, big-traffic sites. 99.99% of web apps written are never going to get near to having those sorts of problems and abandoning a mature, proven technology like SQL should not be taken lightly.\n\nSo I'm going to continue to enjoy learning about new ways to do things, use them where they actually help, and steer clear of pointless time-wasting arguments.","created_at": "2010-09-12 13:53:12","updated_at": "2010-09-12 14:13:55","user_id": 1}, {"id": 10,"title": "Xeround: no to NoSQL","slug": "xeround-no-to-nosql","content": "**Just a quick note to point out an interesting developement in the 'distributed database' field. [Xeround](http://www.xeround.com) are developing a MySQL storage engine that has all the elasticity, redundancy and scalability of some of the popular NoSQL solutions with a 100% compatible MySQL interface.**\n\nThis could be really interesting if it works as well as advertised since any MySQL app can migrate to it with *no code change*.\n\nI do feel though that their [technical whitepaper](http://www.xeround.com/developers/white-paper.html) reads more like a marketing brochure than an academic discussion of the technology - there are no mentions of any downsides or tradeoffs in the design. Specifically, there is no mention of how much slower distributed joins and aggregation are than normal MySQL. just allusions to 'low latency'.\n\nEssentially they have written a front end that does all the complex stuff you application would have to do with another NoSQL solution and then put a MySQL interface on it. If it works and really is fast then it is a very compelling solution. In the absence of benchmarks or real-world discussions though, I'm somewhat sceptical about whether this will really work well for complex queries on actually big data sets. I unfortunately don't have time (or data) to try it for myself but I will keep an eye out...","created_at": "2010-09-15 09:41:20","updated_at": "2010-09-15 09:43:26","user_id": 1}, {"id": 11,"title": "+1 to Textmate","slug": "plus-1-to-textmate","content": "**I posted [a little while back](http://blog.banksdesigns.co.uk/post/the-era-of-komodo-edit) about my trialling of Komodo edit as an IDE. It's good, but just a couple of things bugged me enough that I thought I'd see if I could live with the major change that is switching to [TextMate](http://macromates.com/).**\n\nNow to be completely fair, most of my gripes with Komodo edit were minor and were more to do with what I'm used to than it being a bad product. Since starting a new job (more to come soon) I discovered a few really useful tools had been written for our codebase for the latest beta of Komodo Edit (v6) so I switched to that.\n\nThe thing which made me try TextMate instead was actually that Komodo Edit 6 kept eating my CPU time for no real reason. After using it for a bit, even when I was doing nothing and there was no indication of background activity, it's CPU usage would sit at around 30% which over a while slowed my Mac right down and got it really hot (and loud). If I quit and restarted it would be fine again for a while but eventually would come back up.\n\nThis isn't all that surprising especially considering it is a beta version but it was annoying enough to make me consider alternatives again. Especially since TextMate is also favoured by other devs at my new place of work.\n\nActually I like it. It is less limited than I first thought and writing bundles is powerful and could allow me to reproduce many of the simpler features I miss from other editors. Full code completion isn't there but actually it does do basic PHP and same-file completion which covers a relatively large part of my needs. And I really love the speed and OSXiness.\n\nSo the Jury's still out. I'll see how I get on.","created_at": "2010-09-23 08:45:12","updated_at": "2010-10-27 09:37:10","user_id": 1}, {"id": 12,"title": "A Change of Scenery","slug": "a-change-of-scenery","content": "**My wife Chloe and I are soon going to moving to pastures new. We have decided to escape city life and see how we fare in a more rural setting in Devon. That has meant me moving on to work for a different company too.**\n\nIt was with some reluctance that I said goodbye to [Ents24.com](http://www.ents24.com) two weeks ago. It has been a great couple of years for me working there and I got on really well with all the staff.\n\nMy new challenge involves working remotely for the US-based art community [deviantART](http://www.deviantart.com). Working with a bigger team, remotely and across timezones are all new challenges for me but after two weeks I seem to be getting into the swing of things surprisingly easily.\n\nTechnically it is very different with many more visitors and a much more write-intensive and interactive emphasis. Lots more servers! The code base is also bigger, changes quicker and is no better documented than previous ones I've worked with. This is a little daunting at first although I'm already beginning to feel like I understand broadly how a lot of things work.","created_at": "2010-09-24 09:08:48","updated_at": "2010-09-24 09:10:19","user_id": 1}, {"id": 13,"title": "PHP and the XOR swap trick","slug": "php-and-the-xor-swap-trick","content": "**An exercise most programmers are shown when first being introduced to bit arithmetic is how to swap the values of variables without using a third. The answer is the XOR (eXclusive OR) trick.** \n\nFor some reason this came to mind this morning and I wondered - what happens in PHP if you try to XOR non integer data types? I could probably have looked it up but a 2 minute script showed me the answer: PHP casts whatever value to an int before performing the operation. So no, you can't neatly swap two arrays or objects or even strings without a temporary variable. Oh well.\n\nFor those who've not come across it before. Here is the magic I'm talking about. If you don't believe it works at first, grab a pencil and paper and work through the binary maths for yourself...\n\n\t::php::\n\t$a = 1;\n\t$b = 2;\n\n\techo \"a: \".$a.\", b: \".$b.\"\\n\";\n\n\t// Do the swap\n\t$a ^= $b;\n\t$b ^= $a;\n\t$a ^= $b;\n\n\t// All done\n\techo \"a: \".$a.\", b: \".$b.\"\\n\";\n\nResult:\n\n\ta: 1, b: 2\n\ta: 2, b: 1\n","created_at": "2010-09-30 08:44:43","updated_at": "2010-09-30 08:55:08","user_id": 1}, {"id": 14,"title": "Yet Another Facebook MySQL Tech Talk Re-post","slug": "yet-another-facebook-mysql-tech-talk-re-post","content": "**You've probably read it already but Facebook released a [MySQL Tech Talk](http://www.livestream.com/facebookevents/video?clipId=flv_cc08bf93-7013-41e3-81c9-bfc906ef8442) with loads of juicy database porn for those of us facinated by web scalability.**\n\nI've not got a lot to add other than it's pretty interesting.","created_at": "2010-11-09 19:43:24","updated_at": "2010-11-09 19:43:24","user_id": 1}, {"id": 15,"title": "CoffeeScript: another language to not learn","slug": "coffeescript-another-language-to-not-learn","content": "**My attention was drawn to [CoffeeScript](http://jashkenas.github.com/coffee-script/) recently. I really like it, I think the author has made some changes that *if* they were part of javascript proper would make it somewhat nicer to work with. But it is completely pointless.**\n\nI mean no disrespect - if it solves a problem for the author then I can't argue. All I can say is that I completely missed the point. It isn't even fundamentally changing the way javascript works, no original programming paradigm or domain-specifc problem solving tools.\n\nWhat it's ended up as is some syntax sugar taken variously from several popular languages around at the moment. It doesn't technically improve your javascript app at all and it adds a learning curve and complicates development and deployment by adding a compile phase.\n\n> CoffeeScript is just for fun\n\nFair enough. I can't slam anyone for doing something for fun. And no-one has claimed this to be the new best thing or a must-use tool so I'm not going to start my flamethrower without real provocation!\n\nTo the author: I think the syntax is nice, the features I can see being nice to have and you've done a really excellent job on the site/docs. In general though, this seems like a huge amount of effort for basically no gain.","created_at": "2010-11-09 19:54:45","updated_at": "2010-11-09 20:03:19","user_id": 1}, {"id": 16,"title": "PHP Gotcha: Strings are Arrays Too","slug": "php-gotcha-strings-are-arrays-too","content": "**Actually the title is misleading - but they can at times *seem* like arrays. This just came up at work and although it is one of those things which seems obvious after, it highlights a potentially dangerous and error-prone design pattern.**\n\nBasically we had a function that looked essentially like this:\n\n\t::php::\n\tfunction error_prone($options) {\n\t\tif ( ! isset($options['required_key'])) {\n\t\t\t// throw error\n\t\t}\n\t\t\n\t\t// Manipulate $options['keys'] and return a result\n\t}\n\t\nAt first glance this looks fair enough - while not completely robust, if a badly formed array (without required key) or a non-array is passed it should throw an error right?\n\nWrong. Due to PHP's doubling up of square brackets to work as character manipulation of strings.\n\nIf you don't know what I mean, try this:\n\n\t::php::\n\t$string = 'Hello World!';\n\techo $string[0]; // prints: H\n\techo $string['1']; // prints: e\n\nNow the really unintuitive bit is highlighted on the last line. When you are specifying your character offset, PHP in all it's type-mangling wisdom, allows any variable type and casts to an int. \n\nWhat does this mean for our function above? Well, in some bad cases, $options was being passed a string instead of an array. This was due to another error - but at first glance it seems our error checking should have caught that. What actually happens when a string is passed is:\n\n1.  `$options['required_key']` return first char of `$options` string since `(int) 'required_key'` is `0`\n2. `isset($options['required_key'])` therefore returns true!\n3. Code below mangles up some terrible return value based on chars in the string (mostly the first one) rather than actual options.\n4. Final result is baffling and actual source of error is obfuscated\n\n### Solution\n\nIt really isn't hard to fix: either type hint the function declaration:\n\n\t::php::\n\tfunction not_so_error_prone(array $options)\n\t\nAnd handle the errors/exceptions nicely, or actually explicitly test arrayness with `is_array()`.\n\nThis is a silly mistake but one that can be easily overlooked when reviewing code unless you pay close attention.\n\n\t\n\t","created_at": "2010-11-10 11:37:45","updated_at": "2010-11-13 18:56:45","user_id": 1}, {"id": 17,"title": "Google: Infrastructure Challenges Lecture","slug": "google-infrastructure-challenges-lecture","content": "**Found a great link for [a lecture by Jeffrey Dean](http://videolectures.net/wsdm09_dean_cblirs/) from Google on the challenges of scaling their search product.**\n\nSome fascinating details including their byte encoding scheme for their index and many other wonderful bits of info!","created_at": "2010-11-14 18:18:20","updated_at": "2010-11-14 18:18:20","user_id": 1}, {"id": 18,"title": "When Buzzwords Can't Save You","slug": "when-buzzwords-cant-save-you","content": "**Ooops! Github was down yesterday for several hours and I was expecting one of those \"some complex as-yet-unidentified quirk of replication caused our sharded NoSQL cluster to drop every record with exactly 13 words in the title\" type incident reports. Turns out [a developer just deleted their production DB accidentally](https://github.com/blog/744-today-s-outage).**\n\nFair play to them for the honest post though. This sort of thing does happen to everyone to a lesser or greater extent and I feel for the guy responsible. It does go to show though that  Continuous Integration, Test Driven Development, Rails and all the other associated buzzwords don't always save you from the inevitable!\n\nLesson to learn: don't allow write access to production databases from dev environments. I'd have thought that with all their infrastructure and expertise, that should never have happened.","created_at": "2010-11-15 12:54:01","updated_at": "2010-11-15 12:57:43","user_id": 1}, {"id": 19,"title": "CDE: very cool","slug": "cde-very-cool","content": "**Just got pointed to [a very cool project](http://www.stanford.edu/~pgbovine/cde.html) at stanford to allow linux command executions to be trivially packaged up with all dependencies on one machine and executed on another with no install/dependency issues.**\n\nNot tried it yet but it looks like a great and thoroughly useful little tool!","created_at": "2010-11-15 13:33:14","updated_at": "2010-11-15 13:33:14","user_id": 1}, {"id": 20,"title": "Facebook ditches Cassandra for HBase","slug": "facebook-ditches-cassandra-for-hbase","content": "**[Cassandra](http://cassandra.apache.org/) is an open source distributed database implementation that started life at Facebook as a solution to their message inbox search and storage. Facebook [announced the next generation of messaging](http://blog.facebook.com/blog.php?post=452288242130) this week, and it's powered by [HBase](http://hbase.apache.org).**\n\n[Highscalability.com](http://highscalability.com/blog/2010/11/16/facebooks-new-real-time-messaging-system-hbase-to-store-135.html) have a good article about the announcement and technicalities generally. I was particularly interested having recently read [Bradford's comparison of the two](http://www.roadtofailure.com/2009/10/29/hbase-vs-cassandra-nosql-battle/).\n\nWhat I take from this is a firm reminder that different NoSQL solutions have different engineering trade-offs, and that picking the right tool for any one application is more important that brand loyalty.","created_at": "2010-11-20 16:28:48","updated_at": "2010-11-20 16:31:38","user_id": 1}, {"id": 21,"title": "PHP 'Mixins' Coming Soon!","slug": "php-mixins-coming-soon","content": "**I posted a while back about [PHP's lack of decent support for multiple inheritance](), and concluded that Mixin like behaviour just wasn't natural to PHP as it stands. PHP 5.4 looks like it will change that with the addition of traits.**\n\nSimas Toleikis [introduces traits](http://simas.posterous.com/new-to-php-54-traits) in a great blog post. I'm excited, it looks like it could solve many of the issues I bemoaned PHP as lacking.\n\nSince I have no first hand experience, I'll regurgitate this example from Simas' post above to whet your appetite.\n\n\t::php::\n\ttrait Singleton {\n\t\tpublic static function getInstance() { ... }\n\t}\n\n\tclass A {\n\t\tuse Singleton;\n\t\t// ...\n\t}\n\n\tclass B extends ArrayObject {\n\t\tuse Singleton;\n\t\t// ...\n\t}\n\n\t// Singleton method is now available for both classes\n\tA::getInstance();\n\tB::getInstance();\n\t\nThis is a major win for PHP.","created_at": "2010-11-22 12:09:54","updated_at": "2010-11-22 12:09:54","user_id": 1}, {"id": 22,"title": "Go Back To Uni at Google","slug": "go-back-to-uni-at-google","content": "**If you read this blog you'll be aware that I am a geek and love finding new resources to learn more about geeky things online for free. I've lately found two great resources which will keep me interested for a while.**\n\nFirst is a set of lectures for an entire module on Analysis of Algorithms from MIT which is available from [Peteris Krumins' blog](http://www.catonmat.net/blog/mit-introduction-to-algorithms-part-one) (the videos were released under CC license). Fascinating and a great resource - made me realise how much I missed learning real subjects from real academics!\n\nSecond resource is probably more well-known but new to me. It's [Google's Code University](http://code.google.com/edu/) which seems to be a great resource listing many courses and materials on a wide range of computer science subjects.\n\nIt like christmas come early!","created_at": "2010-11-28 20:18:28","updated_at": "2010-11-28 20:21:43","user_id": 1}, {"id": 23,"title": "Living it LArge","slug": "living-it-large","content": "**I've just got back (well technically not back yet) from my first trip to LA to meet my co-workers in person!**\n\nI really enjoyed it. The hospitality, food and party was great but actually I also really valued being able to talk work face-to-face with my colleagues for the first time. Such subtleties such as facial expression and body language have given me a much clearer idea of what people are like and how they are likely to respond. I'm sure it will make future online discussion significantly easier.\n\nSo there isn't much to say here other than I had a great time.","created_at": "2010-12-19 16:41:07","updated_at": "2010-12-19 16:41:07","user_id": 1}, {"id": 24,"title": "MacBook Pro: a cooling tip to ignore","slug": "macbook-pro-a-cooling-tip-to-ignore","content": "**My main machine these days is still my trusty four-year-old MacBook Pro. I've used it with the battery removed for a while to reduce heat and fan noise when in desktop use. Turns out to be a terrible idea. **\n\nIt may not be a surprise to you but after spending hours last week trying to work out why my machine was so much slower than my colleages, I stumbled across the fact that MacBook Pros throttle their CPU to 1GHz when the battery is removed. This seems extraordinary. Turns out the 90W power supply isn't deemed enough to run at full speed so with the batty unavailable to provide burst power, you get crippled CPU performance. \n\nI originally removed the battery as it appeared to aid cooling when my machine was in desktop mode. Now it is hard to tell if it actually was a thermal benefit or whether the cooler temperatures were only because of the crippled performance. \n\nEither way here's a tip: don't work without a battery on an apple notebook unless severly reduced performance is enough for you. ","created_at": "2011-01-02 12:42:32","updated_at": "2011-01-02 12:44:08","user_id": 1}, {"id": 25,"title": "Learning Common Lisp","slug": "learning-common-lisp","content": "**I love to learn new programming languages. Common Lisp is a great language to learn just to broaden one's horizons.**\n\nIt may not be particularly cool or popular right now and you may find the syntax ugly but there are so many ideas that really don't come up in other languages. You'll soon appeeciate why the syntax is like it is and why that is so powerful. \n\nEspecially if you are from a fairly rigid OO background, the emphasis on a more functional approach and the concepts of treating code as data are fascinating and may offer a new way to look at problems. But Common Lisp isn't truly functional and has a powerful object system too.\n\nYou do almost inevitably have to get over using Emacs as an editor but don't let that stop you from just learning and playing. Just the theory is enough to make me think in whole new ways about problems. \n\nThere are many resources at different levels but by far the best I've found is [Practicle Common Lisp](http://gigamonkeys.com/book/) which has the added bonus of being available free online!","created_at": "2011-01-02 12:58:02","updated_at": "2011-01-02 13:01:32","user_id": 1}, {"id": 26,"title": "Quick benchmarks with jsFiddle","slug": "quick-benchmarks-with-jsfiddle","content": "**At work this week a colleague asked if anyone could think of an optimisation for extracting a rectangular subset of pixel data from an HTML 5 [CanvasPixelArray](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvaspixelarray). I tried a few things with [jsFiddle](http://www.jsfiddle.net).**\n\nMy main idea was that rather than iterating through every pixel and comparing coordinates (`O(n)` running time), you could loop through rows of pixels and remove just the selected ones with `Array.slice()`.\n\nI put together a quick test case with a simplified integer array and tried this. Turns out that although there are fewer iterations, using JS array `slice()` and `concat()` is much much slower probably due to multiple memory copies needed to satisfy them.\n\nYou can see and play with [my test case on jsFiddle](http://jsfiddle.net/pUY7u/2/).\n\nNote that you can make significant savings over the completely naive `O(n)` case by selecting loop boundaries such that only required rows are iterated and then, only required x value extracted with a nested loop. The running time of this case becomes something like `O(k)` where `k` is the number of pixels within the required selection which is strictly `<= n` but probably significantly smaller in most use-cases.\n\nIn algorithmic terms this is not a particularly surprising or ground-breaking result. My colleague has probably already found a better solution anyway. My take away was: jsFiddle is great for quick benchmarking and prototyping of solutions. \n\nIt makes it trivial to construct test cases and share and develop them with others. I did have one glitch triggered by my JS code getting too long for the textarea and causing the UI to 'scroll' but with no way to get it back. But even then a cut, refresh and paste got me back on my feet. And given it's 'alpha' status this is a relatively small complaint.\n","created_at": "2011-01-29 13:59:10","updated_at": "2011-01-29 14:06:53","user_id": 1}, {"id": 27,"title": "More from MIT: Red-Black Trees are Cool","slug": "more-from-mit-red-black-trees-are-cool","content": "**I mentioned [a while back](http://blog.banksdesigns.co.uk/post/go-back-to-uni-at-google) that I had found the lecture videos and notes for MIT's Introduction to algorithms course on [Peter Krumins' blog](http://www.catonmat.net/series/mit-introduction-to-algorithms). I'm still watching them, and they keep getting better.**\n\nI don't have anything particularly sophisticated to say about them other than being really impressed by  [Red-Black trees](http://en.wikipedia.org/wiki/Red-black_trees).\n\nI've found the lectures have not only taught me a lot of things my formal education has lacked regarding algorithms, but it has helped change the way I view problems and enhanced my analytical skills, even without the problem sets, recitation, and \"quizzes\". You can probably see that by my [over-analysis of a simple JS algorithm](http://blog.banksdesigns.co.uk/post/quick-benchmarks-with-jsfiddle) in my last post.\n\nIf you are interested in programming and you didn't learn this stuff at Uni, (or even if you did) I'd highly recommend the lectures once again","created_at": "2011-01-29 14:21:06","updated_at": "2011-01-29 14:21:56","user_id": 1}, {"id": 28,"title": "jQuery 1.5 Beats Monster Callbacks Into Shape","slug": "jquery-15-beats-monster-callbacks-into-shape","content": "**This is a shameless re-blog of [Eric Hynds' article on jQuery deferreds](http://www.erichynds.com/jquery/using-deferreds-in-jquery/). It's a great read.**\n\n[jQuery 1.5](http://jquery.com/) was out yesterday and includes several changes as one might expect. Deferreds are a new concept for me although reading Eric's great article above reveals a powerful and elegant new paradigm for handling callbacks in jQuery.\n\nEssentially jQuery `$.ajax` functions (and most other functions with observable results) now return a deferred object which contains a promise. You can then hook callbacks to the success or failure of that promise and they will all be triggered when the promise is fulfilled. That means you can manage multiple bits of code that depend on an AJAX fetch separately and if you hook up a callback to the request after it has completed, it will be fired immediately.\n\nMoreover, the API is very clean and simple with good semantic verbs for hooking things together. That makes the concept arguably easier to understand than plain function being passed callbacks, despite the extra power and decoupling.\n\nThere is quite a bit more to it than I've described though and Eric does a great job of explaining how and why you might want to use this powerful technique.","created_at": "2011-02-01 10:40:35","updated_at": "2011-02-01 10:45:06","user_id": 1}, {"id": 29,"title": "Learning to program properly","slug": "learning-to-program-properly","content": "**Being inspired by [MIT's introduction to algorithms](http://www.catonmat.net/series/mit-introduction-to-algorithms) I've decided to put some of my newly learnt stuff into practice. And there is not a lot of point in implementing this stuff a language like PHP or JS.**\n\nSo I'm re-learning C. I learnt some very basics as part of my degree and have worked with Objective-C a fair bit so it's not completely alien. It's taken me a lot longer than it was suggested it should, but I've finally got a working implementation of skip lists. \n\nGetting my head back around pointer arithmetic and memory management is a good exercise.\n\nI feel like despite all the cool new languages around, most real infrastructure and interesting technology is still written in real languages like C.","created_at": "2011-02-21 18:23:00","updated_at": "2011-02-21 18:23:46","user_id": 1}, {"id": 30,"title": "Trying to make JS go OO","slug": "trying-to-make-js-go-oo","content": "**At work, we use a version of [Base.js by Dean Edwards](http://dean.edwards.name/weblog/2006/03/base/) to standardise object inheritance and make our JavaScript somewhat more Object Oriented. Today I came across a quirk.**\n\nNow the problem I found isn't with Base.js really - it's an inherent feature of JS's prototyping and object model, however it was made more confusing by Base.js apparently giving you 'class' like definition of objects. After discussing some unintuitive behaviour with [my colleagues](http://dt.deviantart.com) it became clear that this is basic JavaScript behaviour despite being somewhat confusing at first. \n\nI'm sure this issue has been brought up in other Base.js discussions before, in fact Dean's latest version may even have solved it - we are using a somewhat legacy version. But the underlying JS issue was interesting to me so I thought I'd write it up for future reference.\n\n### Instance properties\n\nIf you don't know what Base.js does, read about it on [Dean's blog](http://dean.edwards.name/weblog/2006/03/base/). This basic example shows the creation of a 'Class' with a property which behaves as you would expect:\n\n\t::javascript::\n\tvar TestClass = Base.extend({\n\t\tprop: null,\n\t});\n\tvar a = new TestClass, b = new TestClass;\n\ta.prop = 'A';\n\tconsole.log(a.prop, b.prop); // Log: A null\n\nBut what if your property was an array?\n\n\t::javascript::\n\tvar TestClass = Base.extend({\n\t\tprop: [],\n\t});\n\tvar a = new TestClass, b = new TestClass;\n\ta.prop.push('A');\n\tb.prop.push('B');\n\tconsole.log(a.prop, b.prop); // Log: [\"A\", \"B\"] [\"A\", \"B\"]\n\nWait, what happened there?\n\nWell if you think about what Base.js is doing, it is kind of obvious. JavaScript ALWAYS points to references of objects. That is, any variable that is not a primitive type is a reference.\n\nConsider the non-Base.js equivalent of above (roughy the same as what Base.js is doing under the hood):\n\n\t::javascript::\n\tvar TestClass = function(){};\n\tTestClass.prototype.prop = []; // Assigning a pointer to this specific empty array\n\tvar a = new TestClass, b = new TestClass;\n\ta.prop.push('A');\n\tb.prop.push('B');\n\tconsole.log(a.prop, b.prop); // Log: [\"A\", \"B\"] [\"A\", \"B\"]\n\nHere it is somewhat more obvious what happens. Each instance 'inherits' the `prop` property from it's prototype but that isn't *an* empty array, it is a pointer to the *specific* array the prototype was initialised with.\n\nSo the solution is to do this initial assignment in the constructor:\n\n\t::javascript::\n\tvar TestClass = Base.extend({\n\t\tprop: [],\n\t\tconstructor: function(){\n\t\t\tthis.prop = []; // this is now this instance, creating a new array just for this instance\n\t\t}\n\t});\n\tvar a = new TestClass, b = new TestClass;\n\ta.prop.push('A');\n\tb.prop.push('B');\n\tconsole.log(a.prop, b.prop); // Log: [\"A\"] [\"B\"]\n\t\nOr the equivalent non-base code:\n\n\t::javascript::\n\tvar TestClass = function(){\n\t\tthis.prop = [];\n\t};\n\tvar a = new TestClass, b = new TestClass;\n\ta.prop.push('A');\n\tb.prop.push('B');\n\tconsole.log(a.prop, b.prop); // Log: [\"A\"] [\"B\"]\n\t\n### Back to basics\n\nThis is really very basic Javascript but pseudo-OO frameworks like Base.js (which are great in many ways) can make this behaviour seem even more unintuitive. My take-away is that understanding JavaScript properly is as important as ever despite the great abstractions and frameworks that let us ignore many of the details of how it works most of the time.\n","created_at": "2011-05-12 09:31:51","updated_at": "2011-05-12 09:40:24","user_id": 1}, {"id": 31,"title": "Opera's fixed position problem","slug": "operas-fixed-position-problem","content": "**Opera has a bug with `node.offsetTop` when the node has a fixed position ancestor. That has been [know about for a while](http://www.greywyvern.com/code/opera/bugs/PositionFixedoffsetTop). I didn't think it would take me three separate days of pain to get a handle on.**\n\nIt turns out that it's quite a lot more complex than that page linked above suggests. At work we have an old utility library called `Ruler.js` which does a lot of things relating to measuring element positions relative to all sorts of things. While trying to fix a JS positioning issue caused by this Opera bug I though I could simply correct it by compensating for Opera's extra scroll pixels for fixed position nodes in the offset hierarchy.\n\nThe problem is that Opera isn't even consistently wrong. It only breaks for elements with `display: inline` or `inline-block` (as far as I can tell) and only if they are positioned relatively (either explicitly or implicitly).\n\nWhat is more, if there is any other element in the offset hierarchy between the element you are measuring and the fixed position one, then the results change. In some cases an explicit `position:relative` fixes the behaviour completely.\n\nA [totally non-exhaustive demo](http://jsfiddle.net/XgyWV/5/) shows how odd some results can be. Note that this doesn't really demo the extent of the problems when trying to walk up the offset tree and correct for scroll position etc which was what made the real diagnostics so much more complex.\n\nHere is the output in Safari 5 and Opera 11.10 side by side: \n\n![Screen shot of jsFiddle demo](http://cl.ly/3B3b0P0c2b171j1p3M3C/content)\n\nSo there turned out to be no sensible way to even detect if the position had been mangled by Opera in JS. I resorted to having to add `position:relative` to a parent element where it had no other affect to resolve this case. That also means I'll probably run into this again in the future so i thought I'd document it here!\n\n","created_at": "2011-05-17 15:46:10","updated_at": "2011-05-17 15:51:41","user_id": 1}, {"id": 32,"title": "PHPUnit's Expensive SetUp","slug": "phpunits-expensive-setup","content": "**I've been working a lot with [PHPUnit 3.5](https://github.com/sebastianbergmann/phpunit/) recently. It's good in many ways but it is not fast. That's understandable perhaps given the feature set but there is one apparently obvious oversight which totally ruins the experience.**\n\nThe problem I'm talking about I've [reported as a possible bug](https://github.com/sebastianbergmann/phpunit/issues/261) and yet it has gotten zero attention in over two months. I'll describe it again here.\n\n### The Problem\n\nPHPUnit has a whole multitude of ways to construct a test suite and pick which test to run. Using the command line runner, you can specify specific test case files or dirs and you can use `filter` and `group` options to further restrict.\n\nThe problem is that, whatever you pass as `filter` or `group` arguments, all `setUp()` and `setUpBeforeClass()` methods in all test cases loaded will be run. That's because [filtering is applied after setup methods called](https://github.com/sebastianbergmann/phpunit/blob/3.5/PHPUnit/Framework/TestSuite.php#L653). I really don't see the rationale behind that decision.\n\nAt work we have a large test suite. One part of it is for our database layer and as such has some very expensive setup routines which setup an entire test environment in our test db. Even when you limit the runner to a specific test case, that may mean this very expensive setup operation has to run for every test in the file - even when you are just trying to work with a single test method.\n\nBut we shouldn't have to fiddle about with specifying specific test cases. The `filter` and `group` options are powerful and (should be) very useful for cherry picking from a suite. This seemingly obvious error totally ruins them and makes working with big test suites decidedly awkward.\n\nEven more confusing is the fact that no-one else I've seen online seems to think this is a problem. I've found no other mention of the behaviour and zero interest in my ticket. Did I miss something here? Is there an obvious reason that setup should be run all the time even when filtering tests? All my colleges and other PHP developers I've mentioned this to personally seem to agree it is very odd behaviour. I'd have expected many people to be using PHPUnit with large suites. Does no one else wonder why running a single simple test can take minutes?\n\nI hope I can update this post when something changes, but I've not been encouraged by the response to my ticket so far.","created_at": "2011-08-09 12:45:47","updated_at": "2011-09-08 08:49:12","user_id": 1}, {"id": 33,"title": "More Efficient PHP Arrays","slug": "more-efficient-php-arrays","content": "**One of my first posts here was about [how surprisingly inefficient PHP arrays can get](http://blog.banksdesigns.co.uk/post/when-not-to-use-arrays-in-php). Today I learned of a solution that is probably a lot better than my PHP string serialisation. It's an extension called [intarray](https://github.com/dynamoid/intarray).**\n\nThe extension exposes integer-only arrays as strings to PHP but provides [several useful methods for interacting with them](https://github.com/dynamoid/intarray/blob/master/intarray.php) such as sort, slice and binary search. This means if you are using PHP arrays to store sets of integers, you will likely see a very large improvement in speed and memory usage using this extension.\n\nI've yet to do any real benchmarking but I thought I'd post this as a follow-up from my original post. I know at least one very large site who has used this extension in production with no issue although I obviously urge anyone to evaluate stability etc of any software themselves before deploying.\n","created_at": "2011-08-24 09:25:13","updated_at": "2011-08-24 09:25:20","user_id": 1}, {"id": 34,"title": "LevelDB Fun","slug": "leveldb-fun","content": "**Google recenetly open-sourced [LevelDB](http://code.google.com/p/leveldb/) which is \"a fast key-value storage library\". I've used it as an excuse to play about in C++.**\n\nThere is nothing new or exciting to report to the tech world here - just that I've enjoyed playing about in a language I've not worked much with in the past. \n\nSo far I have hooked up [libevent](http://monkey.org/~provos/libevent/) to LevelDB and made my own little Key-Value database server that can accept multiple clients.\n\nI've also written a C++ client library to talk to it and made up my own Ascii-based data transfer format.\n\nNone of this is useful to anyone other than me - it's great to actually play around with a language like this and to get a feel for it. Much more productive that code tutorials or algorithm exercises.","created_at": "2011-09-17 19:50:36","updated_at": "2011-09-17 19:50:36","user_id": 1}, {"id": 35,"title": "Catch Up","slug": "catch-up","content": "**I've not posted for ages. So here is a summary of a bunch of stuff I've been looking at for fun.**\n\n### Machine Learning\n\nFirst up, after finishing the [MIT Introduction to Algorithms](http://blog.banksdesigns.co.uk/post/go-back-to-uni-at-google) lectures, I was excited to hear about [Stanford's free computer science courses](http://www.openculture.com/2008/09/free_stanford_computer_science_engineering_courses_now_online.html). They are full, taught and (machine) assessed university modules for free! I'm studying [Machine Learning](http://www.ml-class.org) and I am really impressed with the quality of the teaching. Thanks Stanford.\n\nThere is of course speculation that this is a trial for a new paid remote service. To be honest I feel the quality of the course I've done would be worth paying for if they could find a way to acredit something as a real qualification without proper human assessment.\n\n### C++ Experiments\n\nFollowing on from [my experiments with LevelDB](http://blog.banksdesigns.co.uk/post/leveldb-fun), I have played around with creating a C++ gossip implementation [based on Cassandra's](http://wiki.apache.org/cassandra/ArchitectureGossip) using [ZeroMQ](http://www.zeromq.org/). I spent a lot of time getting a really basic grasp on the intricacies of threading vs event driven style + message passing etc. Ended up with multiple processes on same machine (different ports) gossiping and effectively sharing cluster state. Didn't get around to implementing the full [phi accrual failure detection](http://nosql.mypopescu.com/post/3479538825/distributed-systems-the-phi-accrual-failure-detector) for machine/up down inference and I'm sure the code would need to be torn apart and re-written for anythign resembling real use, but a good learning exercise.\n\nI've now moved on to fiddling about with on-disk data structures. So far I'm mostly just learning. I've read through the specs for [SQLite's db file](http://www.sqlite.org/fileformat2.html) and some articles on [CouchDB's Copy-on-write B-tree](http://guide.couchdb.org/draft/btree.html) (not to mention LevelDB/Cassandra's [LSM trees](http://nosqlsummer.org/paper/lsm-tree)). I've also read [Acuna's paper on Stratified B-Trees](http://www.acunu.com/blogs/andy-twigg/stratified-btrees/) which is all really interesting stuff. Not quite sure what I want to implement now but I may start with trying to get a basic block and free-list allocator working. Just the experience of actually working with C++ and \"real\" algorithms is fascinating for me, a lowly PHP developer.\n\nIn summary then, I'm still doing loads of geeky computer stuff, just forgetting to write about any of it.","created_at": "2011-11-09 13:47:58","updated_at": "2011-11-09 13:55:54","user_id": 1}, {"id": 36,"title": "Moving Data and Telling People About It","slug": "moving-data-and-telling-people-about-it","content": "**I published an article for work on [our recent database migration](http://dt.deviantart.com/journal/Moving-6-Billion-Messages-Without-Being-Noticed-285571516) that I was involved with. **\n\nIt was an unorthodox approach which seemed to work well for this particular dataset and hardware/time constraints but certianly not perfect. Some interesting discussion followed.\n\nI'm also secretly quite proud I got a mention on [highscalability.com's weekly roundup](http://highscalability.com/blog/2012/2/24/stuff-the-internet-says-on-scalability-for-february-24-2012.html). Thanks Todd!","created_at": "2012-02-25 09:53:20","updated_at": "2012-02-25 09:53:20","user_id": 1}, {"id": 37,"title": "PHP Arrays (Again)","slug": "php-arrays-again","content": "**I have mentioned PHP array inefficiency a [few](http://blog.banksdesigns.co.uk/post/when-not-to-use-arrays-in-php) [times](http://blog.banksdesigns.co.uk/post/more-efficient-php-arrays) on this blog.**\n\nDiscussing it at work today someone linked me to [a much more thorough review of the topic](http://nikic.github.com/2011/12/12/How-big-are-PHP-arrays-really-Hint-BIG.html) that is interesting and readable.\n\nI'm finding myself so much more interested in this level of stuff than the typical PHP programmer which I guess is why I spend my free time playing with other, generally statically typed, languages...","created_at": "2012-11-15 10:51:18","updated_at": "2012-11-15 10:53:03","user_id": 1}]
    ,fs = require('fs')
    ,_ = require('underscore')
    ,moment = require('moment')
    ,BC = require(__dirname+'/../lib/bc')
    ,yaml = require('js-yaml');

_.each(old_posts, function(post){
    var file = BC.Cfg.paths.content
                +'/p/'
                +moment(post.created_at).format('YYYY-MM-DD')
                +'-'+post.slug+'.md';

    var content = "---\ntitle: "+post.title+"\n---\n"+post.content;

    fs.writeFileSync(file, content, 'utf-8');
    console.log('Wrote: '+file);
});